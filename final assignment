#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <conio.h> // _kbhit() and _getch() 用
#include <windows.h>
#include <algorithm> // std::find 用

const int ROWS = 5;
const int COLS = 6;
int GAME_DURATION = 30; // seconds

struct Position {
    int x, y;
    bool operator==(const Position& other) const {
        return x == other.x && y == other.y;
    }
};

const std::vector<Position> forbiddenPositions = { {1, 1}, {1, 5}, {5, 1}, {5, 5} };

void displayGrid(const std::vector<Position>& positions, const std::vector<char>& types, int remainingTime, int score) {
    system("cls"); // Clear console
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            bool found = false;
            for (size_t k = 0; k < positions.size(); k++) {
                if (i == positions[k].y && j == positions[k].x) {
                    if (types[k] == 'P') {
                        std::cout << "[ \033[31m+\033[0m ]"; // Red +
                    }
                    else if (types[k] == 'T') {
                        std::cout << "[ * ]"; // Target *
                    }
                    else if (types[k] == 'S') {
                        std::cout << "[ \033[33m#\033[0m ]"; // Yellow #
                    }
                    else if (types[k] == 'H') {
                        std::cout << "[ \033[35m＄\033[0m ]"; // Purple $
                    }
                    else if (types[k] == 'B') {
                        std::cout << "[ \033[32m¥\033[0m ]"; // Green ¥
                    }
                    else if (types[k] == 'N') {
                        std::cout << "[ \033[37m!\033[0m ]"; // White !
                    }
                    found = true;
                    break;
                }
            }
            if (!found) {
                std::cout << "[   ]"; // Empty cell
            }
        }
        std::cout << std::endl;
    }

    // Display remaining time and score below the grid
    std::cout << "Time remaining: " << remainingTime << " seconds  |  Score: " << score << std::endl;
}

Position getRandomPosition(const std::vector<Position>& occupied) {
    Position pos;
    do {
        pos.x = rand() % COLS;
        pos.y = rand() % ROWS;
    } while (std::find(occupied.begin(), occupied.end(), pos) != occupied.end() ||
        std::find(forbiddenPositions.begin(), forbiddenPositions.end(), pos) != forbiddenPositions.end());
    return pos;
}

void movePlayer(Position& playerPos, char direction) {
    switch (direction) {
    case 'w': if (playerPos.y > 0) playerPos.y--; break; // Up
    case 'a': if (playerPos.x > 0) playerPos.x--; break; // Left
    case 's': if (playerPos.y < ROWS - 1) playerPos.y++; break; // Down
    case 'd': if (playerPos.x < COLS - 1) playerPos.x++; break; // Right
    }
}

void spawnSupport(std::vector<Position>& positions, std::vector<char>& types, int score) {
    if (score > 0 && score % 10 == 0) {
        Position supportPos = getRandomPosition(positions);
        positions.push_back(supportPos);
        types.push_back('H');
    }
}

void spawnSabotagers(std::vector<Position>& positions, std::vector<char>& types, int score) {
    int sabotagerCount = 0;
    if (score >= 5 && score < 15) sabotagerCount = 1;
    else if (score >= 15 && score < 30) sabotagerCount = 2;
    else if (score >= 30 && score < 50) sabotagerCount = 3;
    else if (score >= 50) sabotagerCount = 5;

    // Remove existing sabotagers
    for (auto it = positions.begin() + 2; it != positions.end(); ) {
        if (types[it - positions.begin()] == 'S') {
            it = positions.erase(it);
            types.erase(types.begin() + (it - positions.begin()));
        }
        else {
            ++it;
        }
    }

    // Add new sabotagers
    for (int i = 0; i < sabotagerCount; i++) {
        Position sabotagerPos = getRandomPosition(positions);
        positions.push_back(sabotagerPos);
        types.push_back('S');
    }
}

void spawnBonus(std::vector<Position>& positions, std::vector<char>& types, int score, bool& bonusSpawned) {
    if (score > 0 && score % 10 == 0 && !bonusSpawned) {
        Position bonusPos = getRandomPosition(positions);
        positions.push_back(bonusPos);
        types.push_back('N');
        bonusSpawned = true; // Set flag to indicate that a bonus item has been spawned
    }
}

bool checkCollision(const Position& pos1, const Position& pos2) {
    return pos1.x == pos2.x && pos1.y == pos2.y;
}

void endGame(int score, bool isSabotagerCollision) {
    if (isSabotagerCollision) {
        std::cout << "You collided with a sabotager!" << std::endl;
    }
    else {
        std::cout << "Game Over!" << std::endl;
    }
    Sleep(5000); // Wait for 5 seconds
    std::cout << "Your score: " << score << std::endl;
}

void countdown() {
    std::cout << "Red +: You. Move with 'w:↑', 'a:←', 's:↓', 'd:→'!" << std::endl;
    std::cout << "*: Target. Catch as many as you can!" << std::endl;
    std::cout << "$: Support item. +10 seconds if you get it!" << std::endl;
    std::cout << "#: Sabotager. Avoid it!" << std::endl;
    std::cout << "!: Bonus. Get +5 points and take the lead!" << std::endl;
    std::cout << "Aim for the high score!" << std::endl;

    for (int i = 10; i > 0; i--) {
        std::cout << i << std::endl;
        Sleep(1000); // Wait for 1 second
    }
    std::cout << "Go!" << std::endl;
    Sleep(1000); // Wait for 1 second
}

int main() {
    srand(static_cast<unsigned int>(time(0)));

    // Store player and target positions
    std::vector<Position> positions = { {1, 1} }; // Initial player position
    std::vector<char> types = { 'P' }; // Player type
    Position targetPos = getRandomPosition(positions);
    positions.push_back(targetPos); // Initial target position
    types.push_back('T'); // Target type
    int score = 0;

    std::cout << "Get ready!" << std::endl;
    countdown(); // Countdown before the game starts

    time_t startTime = time(0);
    time_t endTime = startTime + GAME_DURATION;

    bool bonusSpawned = false;

    while (difftime(endTime, time(0)) > 0) {
        int remainingTime = static_cast<int>(difftime(endTime, time(0)));
        displayGrid(positions, types, remainingTime, score);

        // Spawn bonus items
        spawnBonus(positions, types, score, bonusSpawned);

        if (_kbhit()) {
            char key = _getch();
            movePlayer(positions[0], key); // Move player

            // Check for collision between player and target
            if (checkCollision(positions[0], positions[1])) {
                score++;
                spawnSabotagers(positions, types, score); // Respawn sabotagers
                positions[1] = getRandomPosition(positions); // Move target to a new position
                types[1] = 'T'; // Target type
                spawnSupport(positions, types, score); // Check for support item spawn
                bonusSpawned = false; // Reset bonus spawn flag
            }

            // Check for collision between player and sabotager
            for (auto it = positions.begin() + 2; it != positions.end(); ) {
                if (types[it - positions.begin()] == 'S' && checkCollision(positions[0], *it)) {
                    endGame(score, true); // End game if collided with a sabotager
                    return;
                }
                else {
                    ++it;
                }
            }
        }
    }

    endGame(score, false); // End game if time runs out
    return 0;
}
